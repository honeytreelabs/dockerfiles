version: '3.8'

services:
  ts-proxy:
    env_file: ../invoice/docker-env
    environment:
      CADDY_CONFIG: |
        {
          local_certs
        }

        https://invoice.honeytreelabs.tailscale:443 {
          tls /etc/caddy/ssl/server.pem /etc/caddy/ssl/server-key.pem
          root * /var/www/app/public
          php_fastcgi app:9000
          encode zstd gzip
          file_server browse
        }
    volumes:
      - /root/infra/invoice/data/tailscale:/var/lib/tailscale
      - /root/infra/invoice/config/caddy:/etc/caddy
      - /root/infra/invoice/docker/app/public:/var/www/app/public:ro
    depends_on:
      - app
    # Run webserver nginx on port 80
    # Feel free to modify depending what port is already occupied
    # ports:
      # - "80:80"
      # - "443:443"

  app:
    image: invoiceninja/invoiceninja:5
    env_file: ../invoice/docker-env
    restart: always
    volumes:
      - /root/infra/invoice/docker/app/public:/var/www/app/public:rw
      - /root/infra/invoice/docker/app/storage:/var/www/app/storage:rw
    depends_on:
      - db

  db:
    image: mysql:5
#    When running on ARM64 use MariaDB instead of MySQL
#    image: mariadb:10.4
#    For auto DB backups comment out image and use the build block below
#    build:
#      context: ./config/mysql
    # ports:
      # - "3305:3306"
    restart: always
    env_file: ../invoice/docker-env
    volumes:
      - /root/infra/invoice/docker/mysql/data:/var/lib/mysql:rw

      # remove comments for next 4 lines if you want auto sql backups
      #- ./docker/mysql/bak:/backups:rw
      #- ./config/mysql/backup-script:/etc/cron.daily/daily:ro
      #- ./config/mysql/backup-script:/etc/cron.weekly/weekly:ro
      #- ./config/mysql/backup-script:/etc/cron.monthly/monthly:ro

  # THIS IS ONLY A VALID CONFIGURATION FOR IN 4. DO NOT USE FOR IN 5.
  # cron:
  #   image: invoiceninja/invoiceninja:alpine-4
  #   volumes:
      # - ./docker/app/public:/var/www/app/public:rw,delegated
      # - ./docker/app/storage:/var/www/app/storage:rw,delegated
      # - ./docker/app/public/logo:/var/www/app/public/logo:rw,delegated
  #   entrypoint: |
  #     /bin/sh -c 'sh -s <<EOF
  #     trap "break;exit" SIGHUP SIGINT SIGTERM
  #     sleep 300s
  #     while /bin/true; do
  #       ./artisan ninja:send-invoices
  #       ./artisan ninja:send-reminders
  #       sleep 1d
  #     done
  #     EOF'
  #   networks:
  #     - invoiceninja
  #

